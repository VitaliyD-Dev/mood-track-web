<!-- –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —á–∞—Ç—É -->
<div id="chat-widget"
    class="mx-auto flex max-w-sm items-center gap-x-4 rounded-xl bg-white p-6 shadow-lg outline outline-black/5 dark:bg-slate-800 dark:shadow-none dark:-outline-offset-1 dark:outline-white/10 cursor-pointer animate-pulsate transform hover:bg-blue-700 transition"
    style="position: fixed; bottom: 10rem; right: 1rem; z-index: 9999;">
    <img class="size-12 shrink-0" src="/img/logo.png" alt="Chat Logo" />
    <div>
        <div class="text-xl font-medium text-black dark:text-black">–ß–∞—Ç –∑ Llama 3</div>
        <p class="text-gray-500 dark:text-gray-400">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç</p>
    </div>
</div>

<!-- –ë–ª–æ–∫ —á–∞—Ç—É -->
<div id="chat-box"
    class="fixed bottom-20 w-96 bg-white shadow-xl rounded-lg hidden z-50 transition-all duration-300 ease-in-out opacity-0 scale-95 dark:bg-slate-800"
    style="right: 0.5rem !important; bottom: 8rem !important; width: 384px; height: 480px;">
    <div class="bg-blue-600 text-white p-4 rounded-t-lg flex justify-between items-center">
        <div class="flex items-center gap-x-3">
            <img class="size-8 shrink-0" src="/img/logo.png" alt="Chat Logo" />
            <span class="font-bold">–ß–∞—Ç –∑ Llama 3</span>
        </div>
        <button id="close-chat" class="text-lg focus:outline-none">‚úñ</button>
    </div>
    <div class="p-4 h-[calc(100%-48px)] overflow-y-auto text-black dark:text-black-300" style="word-break: break-word;">
        <div class="flex flex-col h-full">
            <div id="chat-messages" class="flex-1 overflow-y-auto mb-2 text-sm"></div>

            <div class="flex">
                <input type="text" id="chat-input" placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
                    class="flex-1 border rounded-l px-3 py-2 focus:outline-none text-black dark:bg-slate-700 dark:border-slate-600 dark:text-black">
                <button id="chat-send" class="bg-blue-600 text-white px-4 py-2 rounded-r hover:bg-blue-700">
                    –ù–∞–¥—ñ—Å–ª–∞—Ç–∏
                </button>
            </div>
        </div>
    </div>
</div>

@push('scripts')
    <style>
        /* –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–∫—Ä–æ–ª–±–∞—Ä –¥–ª—è WebKit (Chrome, Safari) */
        #chat-box .overflow-y-auto::-webkit-scrollbar {
            display: none;
        }

        /* –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–∫—Ä–æ–ª–±–∞—Ä –¥–ª—è IE, Edge —Ç–∞ Firefox */
        #chat-box .overflow-y-auto {
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chatWidget = document.getElementById('chat-widget');
            const chatBox = document.getElementById('chat-box');
            const closeChat = document.getElementById('close-chat');
            const chatInput = document.getElementById('chat-input');
            const chatSend = document.getElementById('chat-send');
            const chatMessages = document.getElementById('chat-messages');

            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ sessionStorage
            function saveMessages() {
                const messages = Array.from(chatMessages.children).map(messageElement => {
                    const senderEmoji = messageElement.querySelector('strong').textContent.replace(':', '').trim();
                    // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ span
                    const textElement = messageElement.querySelector('span');
                    const text = textElement ? textElement.textContent.trim() : ''; // –ó–∞–≤–∂–¥–∏ –±–µ—Ä–µ–º–æ —Ç–µ–∫—Å—Ç –∑—ñ span
                    
                    return { emoji: senderEmoji, text: text };
                });
                sessionStorage.setItem('chatHistory', JSON.stringify(messages));
            }

            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ sessionStorage
            function loadMessages() {
                const savedMessages = sessionStorage.getItem('chatHistory');
                if (savedMessages) {
                    let messages;
                    try {
                        messages = JSON.parse(savedMessages);
                    } catch (e) {
                         console.error('Failed to parse chat history from sessionStorage:', e);
                         sessionStorage.removeItem('chatHistory'); // –û—á–∏—Å—Ç–∏—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
                         return;
                    }

                    messages.forEach(message => {
                        let cleanText = message.text;
                        // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤, —è–∫—ñ –º–æ–≥–ª–∏ –∑–±–µ—Ä–µ–≥—Ç–∏—Å—è
                        const prefixes = ['üë§:', 'ü§ñ:', '‚ö†Ô∏è:'];
                        let prefixFound = true;
                        while(prefixFound) {
                            prefixFound = false;
                            for(const prefix of prefixes) {
                                if (cleanText.startsWith(prefix)) {
                                    cleanText = cleanText.substring(prefix.length).trim();
                                    prefixFound = true; // –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ—Ñ—ñ–∫—Å
                                    break; // –í–∏–π—Ç–∏ –∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —Ü–∏–∫–ª—É —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–Ω–æ–≤—É
                                }
                            }
                        }

                        // –ü–µ—Ä–µ–¥–∞—î–º–æ –æ—á–∏—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –≤ appendMessage –∑ save = false
                        appendMessage(message.emoji, cleanText, false);
                    });
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }
            }

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            loadMessages();

            chatWidget.addEventListener('click', () => {
                if (chatBox.classList.contains('hidden')) {
                    chatBox.classList.remove('hidden');
                    setTimeout(() => {
                        chatBox.classList.remove('opacity-0', 'scale-95');
                        chatBox.classList.add('opacity-100', 'scale-100');
                    }, 10);
                    chatWidget.style.zIndex = '49';
                } else {
                    chatBox.classList.remove('opacity-100', 'scale-100');
                    chatBox.classList.add('opacity-0', 'scale-95');
                    setTimeout(() => {
                        chatBox.classList.add('hidden');
                    }, 300);
                    chatWidget.style.zIndex = '9999';
                }
            });

            closeChat.addEventListener('click', () => {
                chatBox.classList.remove('opacity-100', 'scale-100');
                chatBox.classList.add('opacity-0', 'scale-95');
                setTimeout(() => {
                    chatBox.classList.add('hidden');
                }, 300);
                chatWidget.style.zIndex = '9999';
            });

            chatSend.addEventListener('click', sendMessage);
            chatInput.addEventListener('keydown', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    sendMessage();
                }
            });

            async function sendMessage() {
                const message = chatInput.value.trim();
                if (!message) return;

                appendMessage('üë§', message);
                chatInput.value = '';

                // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ —Ç–∏–º—á–∞—Å–æ–≤–∏–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –µ—Ñ–µ–∫—Ç—É –Ω–∞–±–æ—Ä—É
                const botMessageDiv = appendMessage('ü§ñ', '', false); // –ü–µ—Ä–µ–¥–∞—î–º–æ false, —â–æ–± –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –æ–¥—Ä–∞–∑—É

                try {
                    const response = await fetch('/api/llama/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            message: message,
                            model: 'llama3'
                        })
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.error || 'Network response was not ok');
                    }

                    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –µ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–æ—Ç–∞
                    await typeMessage(botMessageDiv, data.response);

                    chatMessages.scrollTop = chatMessages.scrollHeight;
                    saveMessages(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–±–æ—Ä—É

                } catch (error) {
                    console.error('Error:', error);
                    // –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –æ–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ –ø–æ–º–∏–ª–∫–æ—é
                    if (botMessageDiv) {
                        // –û—Ç—Ä–∏–º—É—î–º–æ span –¥–ª—è –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –≤—ñ–Ω —î (–º–∞—î –±—É—Ç–∏ –ø—ñ—Å–ª—è appendMessage)
                        const typingTextSpan = botMessageDiv.querySelector('span');
                        if (typingTextSpan) {
                             typingTextSpan.textContent = `–ü–æ–º–∏–ª–∫–∞: ${error.message}`;
                             typingTextSpan.removeAttribute('id'); // –í–∏–¥–∞–ª—è—î–º–æ id –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                        } else {
                             // –Ø–∫—â–æ span —á–æ–º—É—Å—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ innerHTML
                            botMessageDiv.innerHTML = `<strong>‚ö†Ô∏è:</strong> –ü–æ–º–∏–ª–∫–∞: ${error.message}`;
                        }

                    } else {
                         // –Ø–∫—â–æ botMessageDiv –Ω–µ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤–∑–∞–≥–∞–ª—ñ (–¥—É–∂–µ –º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ)
                         appendMessage('‚ö†Ô∏è', `–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
                    }
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                    saveMessages(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                }
            }

            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç
            function appendMessage(senderEmoji, text, save = true) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('my-1');
                 // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ <span> –¥–ª—è –≤–º—ñ—Å—Ç—É, —â–æ –Ω–∞–±–∏—Ä–∞—î—Ç—å—Å—è
                messageDiv.innerHTML = `<strong>${senderEmoji}:</strong> <span>${text}</span>`;
                chatMessages.appendChild(messageDiv);
                
                if (save) {
                    saveMessages();
                }
                return messageDiv; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –µ—Ñ–µ–∫—Ç—É –Ω–∞–±–æ—Ä—É
            }

            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É
            async function typeMessage(messageElement, text) {
                // –®—É–∫–∞—î–º–æ span –¥–ª—è –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                const typingTextSpan = messageElement.querySelector('span');
                if (!typingTextSpan) {
                     console.error('Typing span not found!', messageElement);
                     return;
                }
                
                typingTextSpan.textContent = ''; // –û—á–∏—â–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç
                const characters = text.split('');

                for (let i = 0; i < characters.length; i++) {
                    typingTextSpan.textContent += characters[i];
                    chatMessages.scrollTop = chatMessages.scrollHeight; // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –≤–Ω–∏–∑ –ø—ñ–¥ —á–∞—Å –Ω–∞–±–æ—Ä—É
                    await new Promise(resolve => setTimeout(resolve, 20)); // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–∏–º–≤–æ–ª–∞–º–∏ (20 –º—Å)
                }
            }

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –≤—ñ–∫–Ω–∞
            window.addEventListener('beforeunload', saveMessages);
        });
    </script>
@endpush